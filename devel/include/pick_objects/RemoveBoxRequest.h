// Generated by gencpp from file pick_objects/RemoveBoxRequest.msg
// DO NOT EDIT!


#ifndef PICK_OBJECTS_MESSAGE_REMOVEBOXREQUEST_H
#define PICK_OBJECTS_MESSAGE_REMOVEBOXREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pick_objects
{
template <class ContainerAllocator>
struct RemoveBoxRequest_
{
  typedef RemoveBoxRequest_<ContainerAllocator> Type;

  RemoveBoxRequest_()
    : linear_x(0.0)
    , linear_y(0.0)
    , info()  {
    }
  RemoveBoxRequest_(const ContainerAllocator& _alloc)
    : linear_x(0.0)
    , linear_y(0.0)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef double _linear_x_type;
  _linear_x_type linear_x;

   typedef double _linear_y_type;
  _linear_y_type linear_y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RemoveBoxRequest_

typedef ::pick_objects::RemoveBoxRequest_<std::allocator<void> > RemoveBoxRequest;

typedef boost::shared_ptr< ::pick_objects::RemoveBoxRequest > RemoveBoxRequestPtr;
typedef boost::shared_ptr< ::pick_objects::RemoveBoxRequest const> RemoveBoxRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pick_objects::RemoveBoxRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pick_objects

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70778ab58c223b3cc4d6daa5b18bec49";
  }

  static const char* value(const ::pick_objects::RemoveBoxRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70778ab58c223b3cULL;
  static const uint64_t static_value2 = 0xc4d6daa5b18bec49ULL;
};

template<class ContainerAllocator>
struct DataType< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pick_objects/RemoveBoxRequest";
  }

  static const char* value(const ::pick_objects::RemoveBoxRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float64 linear_x\n\
float64 linear_y\n\
string info\n\
";
  }

  static const char* value(const ::pick_objects::RemoveBoxRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_x);
      stream.next(m.linear_y);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoveBoxRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pick_objects::RemoveBoxRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pick_objects::RemoveBoxRequest_<ContainerAllocator>& v)
  {
    s << indent << "linear_x: ";
    Printer<double>::stream(s, indent + "  ", v.linear_x);
    s << indent << "linear_y: ";
    Printer<double>::stream(s, indent + "  ", v.linear_y);
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICK_OBJECTS_MESSAGE_REMOVEBOXREQUEST_H
